generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  token         String   @unique
  refresh_token String?
  expires_at    DateTime
  user_id       String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("user_tokens")
}

model File {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String @unique
  type      String
  size      Int
  mime_type String
  metadata  Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Interaction {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  blocks    Json[]
  data      Json[]
  events    Json[]
  metadata  Json?
  depth     Int    @default(0)
  locations Json[] @default([])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  template_id    String
  publication_id String
  page_id        String
  user_id        String

  Publication Publication @relation(fields: [publication_id], references: [id])
  Page        Page        @relation(fields: [page_id], references: [id])
  Template    Template    @relation(fields: [template_id], references: [id])
  User        User        @relation(fields: [user_id], references: [id])

  @@map("interactions")
}

model Page {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  slug           String  @unique
  avatar_url     String?
  background_url String?
  services       Json[]  @default([])
  trackers       Json?
  access_config  Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  workspace_id String

  templates   Template[]
  Publication Publication[]
  Interaction Interaction[]
  Workspace   Workspace?    @relation(fields: [workspace_id], references: [id])

  @@map("pages")
}

model Publication {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  blocks       Json[]
  dependencies Json?
  published_at DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  template_id String?
  page_id     String

  Interaction Interaction[]
  Template    Template?     @relation(fields: [template_id], references: [id])
  Page        Page?         @relation(fields: [page_id], references: [id])

  @@map("publications")
}

model Template {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  title                      String
  slug                       String
  shortcut_image             String
  shortcut_size              String   @default("small")
  trackers                   Json?
  number_of_new_interactions Int      @default(0)
  deleted                    Boolean?
  access_config              Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  page_id                String
  current_publication_id String?

  Page         Page?         @relation(fields: [page_id], references: [id])
  Publications Publication[]
  Interactions Interaction[]

  @@map("templates")
}

model User {
  id                            String    @id @default(auto()) @map("_id") @db.ObjectId
  email                         String?   @unique
  password                      String?
  type                          String    @default("visitant")
  email_verified                Boolean   @default(false)
  password_reset_token_attempts Int       @default(0)
  name                          String?
  avatar_url                    String?
  services                      Json[]    @default([])
  confirmation_token            String?
  last_login                    DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  Workspace   Workspace[]
  Interaction Interaction[]

  @@map("users")
}

model Workspace {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String   @unique
  avatar_url String?
  services   Json[]   @default([])
  members    Json[]   @default([])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id String?

  User User?  @relation(fields: [user_id], references: [id])
  Page Page[]

  @@map("workspaces")
}

model FileEntity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fileName  String
  fileUrl   String
  key       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files")
}
